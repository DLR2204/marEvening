on-1 off-0------------------->Ascii/Unicode

s.l :- designing of websites

p.l :- developing of softwares

							computer languages
				
				Scripting languages			programming languages
			
			html,css,js,........			pop				oop
									basic,.......		java,.net........
									
									
Security :- Abstraction,Encapsulation

Performance :- Inheritance,Polymorphism


java:- 		oopl -------->   oops
======

(1)Portable


(2)Garbage Collector

sunmicrosystems                                  oracle

greentalk(.gt)------------------->oak --------->java(.java)

jdk 1.0------------------------------------------> jdk 24

to check java version in pc :- java --version


jse/j2se:- core java  - standalone

jee/j2ee:- adv java   - web/distributed

jme/j2me:- micro java - mobile

53

variables :- 

		syntax:- 

				datatype varname ; //declaration
				
				datatype varname = value; //initilization
				
				
	2 types :- 
	
	
	local variable(inside the method) 	global variable(outside the method)
				
				
									static 				instance
									
syntax :- 
=======

static -  static datatype variable = value;

instance -  datatype variable = value;


access :- 
========
static -  Static prop's can be accessed by the class reference

instance -Instance prop's can be accessed by the object reference

			syntax :- classname objname = new classname();

memory space :- 
=============

static - Static prop's will gets the memory space only once when the class loading into the jvm

instance -Instance prop's will gets the memory space for every object creation.


usage :- 
=======
static - Static prop's can used to store the common data

instance - Unique data



in the memory:- 									

static - Method Area

instance -Heap Area
	
	
	Operators :- 		ULTRA AB
	----------
	
	a    +(operators)      b(operands)
	
	Uninary Operator
	
	Logical Operator
	
	Terinary Operator
	
	Relational Operator
	
	Assignment Operator
	
	Arithematic Operator
	
	Bitwise Operator
	
				
	Flow Control :- 
-----------------	
		(1)Conditional 

		(2)Loops
		
		(3)Transfer 
		
		
		
Method:- set of statements where altogether will performs the task
------

syntax:-    accessModifier  returntype  methodName(params....){

			//body
				}

based on the syntax :- 2 types 

			(1)Static method
			
	syntax:-    accessModifier static returntype  methodName(params....){

			//body
				}		
			
			
			(2)Dynmaic method
			
	syntax:-    accessModifier  returntype  methodName(params....){

			//body
				}
				
				
class = variable(class members) + methods(member functions) 
	
	
	Inheritance:- Accquiring parent class  prop's to the child class
	------------
	
							*Code Reusability
				
				extends 						implements
				class--->class					interface----->class
				
		class A{    //  parent /super
		
		1000 methods
		
		}
		
		class B extends A{  //child/base/sub
		
		1000 methods
		
		
		
		class A{			class B{
		
		
		add(int a,int b)     add(int a,int b){  
		
		a+b;				a*b;
						
		}}						}}
	
	class C extends A,B{
	
	
	add(6,4);--------------->
	
	
	*M.I is not in java supported @ class level
	
	*M.I is supported in java @ interface level
	
	
	Methods - based on the implementations :- 2 types
	-------
	(1)concrete methods :- methods with method body/implementation
	
		syntax:-    accessModifier  returntype  methodName(params....){

			//body
				}
	
	
	(2)abstract methods :- method with out method body/implementation
	
		syntax:-    accessModifier  returntype  methodName(params....);
		
		
		class = only collection of concrete methods
		
		abstract class = concrete methods + abstract methods
		
		interface = only collection of abstracts methods
		

	Abstration:- Hide the data
	----------			
				
				* Security
				
	interface - 100% 
	
	abstract classes - 0%-100%
	
	class - 0%
	
	
	polymorphism:- *Performance
	============
	
	(1)MethodOverloading:- method name is same but with diff params
							
							(a)type of params
							(b)order of params
							(c)number of params
	
	
	(2)MethodOverriding :- method name is same but with diff implementation/body
	
	
		class Parent{
		
		1000Cr()
		
		marriage(){kajol}
		
		relatives()
		
		}
		
		class Child extends Parent{
		
		@Override
		
		}
		
		Encapsulation :- it will wraps the data into a single unit
		-------------
		
		
		the default parent class for every java class is :- java.lang.Object;
		
		The default package for every java file:- java.lang;
		
		
		Constructor:- It will intializes the object
		------------
		
		(1)default constructor
		
		syntax:- 
		
				a.m className(){
				//body
				}
		
		
		(2)parametrized constructor
		
		syntax:- 
		
				a.m className(params...){
				//body
				}
				
				
				
	**Constructor call must be the first statement in a constructor
	
	
	FileHandling :-  java.io;
	------------
	
	(1)To create a file :-       File
	
	(2)To write into the file :- FileWriter
								 BufferedWriter
								 PrintWriter
								 
	(3)To read from the file :-  FileReader
								 BufferedReader
								 
								 
								 
	Array:- The collection of homogenous data
	
	
	syntax:- 
	
			int arr[] = new int[10];
			
			int []arr = new int[]{1,1,1,1,1,1,1,1};
			
			int[] arr = {1,2,3,4,5,6,67,7,7,87}
			
			
	(1)only homogenous data can be injected
	
	(2)no utility methods
	
	(3)fixed in size
	
	
	collection :- framework   [util]
	=============
	
	(1)both heterogenous/ homogenous data can be injected
	
	(2)lots of utility methods
	
	(3)not fixed in size
	
	
	String:- 
	====-==
	
	String 				StringBuffer				StringBuilder
	
	immutable(scp)			mutable						mutable
	
							sync						non-sync
							
	MutliThreading :- running multiple threads(unit task) at a time .
	
	
	
	Junit:-  java unit testing
	======
	
	
									Database:- 
									=========
	
	
	     berry     123 
		 pear      233
		 guva      293
		 apple     234	
		 
		 
		 RDBMS :- Table = row (records) + column (fields)
		 
		 
		 Query:- A command to perfom any operation in the db.5 types
		 
		 
		 DDL (Data definition Lang) :- create,alter,rename,truncate,drop  [auto committed]
		 
		 DML(Data Manipulation Lang):- insert,update,delete  [not auto committed]
		 
		 DRL (Data Retrival Lang):- select 
		 
		 DCL(Data Control Lang):- grant,revoke
		 
		 TCL(Transtraction Control Lang):- commit,rollback
		 
		 
		
cmd> conn /as sysdba;

cmd> create user username identified by password;

cmd> grant connect, resource to username;

cmd> conn username/password		      ------>Login
		 
		 
	truncate :- it will eraises the data in the table
	
	delete :- it will deletes all the data(or) mentioned data in the table. 

	drop :- it will deletes the entire table
	
								jdbc:- 
								-----
								
	(1)Loading the driver classes
	
	(2)Create the connection
	
	(3)Create the statement
	
	(4)Exceute the statement
	
	(5)Close the connections
	
	
	limitations :- 
	------------
	
	(1)sql queries
	
	(2)table creation
	
	(3)same file for db prop's , logic
	
	(4)boilers plate code[repeated code]
	
	
	jpa[java persistence api]  -->specifications
	---
	
	(1)no sql queries
	
	(2)no table creation
	
	(3)diff file for db prop's , logic
	
	(4)no boilers plate code[repeated code]
	
	
	ORM Tools ---Implementations  :- hibernate,ecllipse link,ibatis,toplink..........
	
	(1)no sql queries  ---- equivalent methods
	
	(2)no table creation  --- 
	
	
	class-----> table
	
	variables -----> columns
	
	objects ------>row
	
	(3)diff file for db prop's , logic  ---- db -> xml file; logic -> java file
	
	(4)no boilers plate code[repeated code]
	
	
	tag  :- 2 types
	
	container/pair :-  <predefined word></predefined word>
	
	single/empty:- <predefined word> or </predefined word>
	
	
	
	maven :- build tool
	
	
									Spring:- 
									======
	
	def:- Spring is a non-invasive framework which is used to develop light-weighted and
	
				loosely coupled web app's.
				
				
			invasive:- it will rushes the programmer to use inbuilt api

			non-invasive :- it will not rushes the programmer to use the inbuilt api.
			
			
			heavy-weighted :- 
			
			
			class A{
			
			10000 methods
			}
			
			class B extends A{
			10 methods
			}
			
			class C extends B{
			 
			 1 method + 10 = 11 Methods
			
			}
			
			
			Tightly-coupled:- if the dependencies b/n the classes are very high 
			
			loosley coupled :- If the dependencies b/n the classes are very low
			
			
	SpringCore,SpringBoot,Spring DataJpa,Spring Rest,Spring Security....................
	
	
							SpringCore:- 
							----------
		It will avoid the dependencies b/n classes(by stopping object creation manullay)
		
		
		Containers:- will creates the objects
		
					(1)ApplicationContext
	
					(2)BeanFactory
					
					
		DependencyInjection:- Passing the data into the objects
		
					(1)Setter Injection. <property></property>
					
					(2)Constructor Injection.  <constructor-arg></constructor-arg>
					
					(3)Autowired
					
		
		Configurations:- 
		
						(1)Xml Configuration
						
						(2)Annotation Configuration
						
						
						
		SpringBoot:-
		----------
		
		
		(1)AutoConfiguration  
		
		(2)Embedder Server :- tomcat 8080
		
		(3)Starters :- Set of jar files
		
		(4)Actuators :- It will gives the status of our app through end point urls.
		
		
		Controller :- it is used to interact with the browser throught http url's.
		
		dao/repo :- it is used to interact with the db
		
		service :- it is the mediator b/n controller and dao.
		
		
		
		Spring Rest:- 
		
		webservices :- It is used to make interaction possible b/n two interoperable app's.
		
		(1)Soap :- The common lang used is XML
		
		
		(2)Rest :- The common lang used is :- Xml,html,json,php,txt........
		
		
								FrontEnd:- 
								========
								
			website :- collection of webpages
			
					(1)Static WebPage:- The changes are stagnant ex:- Registration 
					
					(2)Dynamic WebPage:-The changes will happens regular
					
					(3)Server WebPage:- the data from the dynamic and server webpage will gets stored here.
					
					
			
			HTML:- 	Hyper Text Markup Lang
			----
			
			tag  :- 2 types
	
	container/pair :-  <predefined word></predefined word>
	
	single/empty:- <predefined word> or </predefined word>
			
			
			
			<h1 attributes = "values">Hello Shilpa</h1>  ---------->element in html
			
			
								Css(Cascading Style Sheets)
								===========================
								
								
		(1)Inline Styling :- Style attribute inside the opening tag
		
		(2)Internal Styling :- <style> inside the <head>]
		
		(3)External Styling :- attaching .css file to the .html file
		
		selectors :- 
		==========
		
		(1)tag name :-  h1,h2
		
		(2)id name:-  #idName
		
		(3)class name :-   .ClassName
		
		(4)Universal :-   *
		
		
		
							javascript:- 
							===========
		
		(1)Dynamic & Interactive webpages
		
		(2)To change the html elements
		
		(3)TO change the html attributes
		
		(4)TO change the css Styling
		
		(5)To hide the data 
		
		(6)To develop responsive webpages
		
		
		identifiers 
		
		outputs in js :- 
		----------------
		
		(1)innerHTML  --the given data will be displayed from the html tag in the webpage
		
		(2)document.write() --the given data in write function will be displayed  in the webpage
		
		(3)window.alert()--the given data in the alert fun will be displayed like the alert msg
		
		(4)console.log()--the given data will be displayed  in the console window
		
		
------>(1)Internal scripting :- <script> inside the head or body tags

------>(2)External Scripting :- attaching .js file to the html doc.
		
		variables
		
		datatypes
		
		flow controls